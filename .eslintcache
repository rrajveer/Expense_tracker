[{"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\index.js":"1","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\App.js":"2","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\reportWebVitals.js":"3","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\index.js":"4","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Details\\Details.jsx":"5","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Details\\styles.js":"6","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\styles.js":"7","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\Main.jsx":"8","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\styles.js":"9","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Form\\Form.jsx":"10","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Form\\styles.js":"11","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\List\\List.jsx":"12","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\List\\styles.js":"13","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\Context\\Context.js":"14","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\Context\\contextReducer.js":"15","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\Constant\\categories.js":"16","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\utils\\FormatDate.js":"17","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\useTransactions.js":"18","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\SnackBar\\SnackBar.jsx":"19","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\SnackBar\\styles.js":"20","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\InfoCard.jsx":"21"},{"size":694,"mtime":1610146280492,"results":"22","hashOfConfig":"23"},{"size":1538,"mtime":1610162876618,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":101,"mtime":1609995616877,"results":"26","hashOfConfig":"23"},{"size":722,"mtime":1610154674333,"results":"27","hashOfConfig":"23"},{"size":293,"mtime":1610031425728,"results":"28","hashOfConfig":"23"},{"size":577,"mtime":1610162077178,"results":"29","hashOfConfig":"23"},{"size":1306,"mtime":1610161695293,"results":"30","hashOfConfig":"23"},{"size":512,"mtime":1609995084440,"results":"31","hashOfConfig":"23"},{"size":5291,"mtime":1610338306744,"results":"32","hashOfConfig":"23"},{"size":332,"mtime":1610339126024,"results":"33","hashOfConfig":"23"},{"size":1830,"mtime":1610055135799,"results":"34","hashOfConfig":"23"},{"size":414,"mtime":1610042974383,"results":"35","hashOfConfig":"23"},{"size":1118,"mtime":1610154290124,"results":"36","hashOfConfig":"23"},{"size":679,"mtime":1610152951032,"results":"37","hashOfConfig":"23"},{"size":1691,"mtime":1610055710261,"results":"38","hashOfConfig":"23"},{"size":341,"mtime":1610057495394,"results":"39","hashOfConfig":"23"},{"size":1197,"mtime":1610131834762,"results":"40","hashOfConfig":"23"},{"size":931,"mtime":1610159494550,"results":"41","hashOfConfig":"23"},{"size":204,"mtime":1610158589288,"results":"42","hashOfConfig":"23"},{"size":484,"mtime":1610160319214,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"b836pd",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\index.js",[],["92","93"],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\App.js",["94"],"import useStyles from './styles.js';\nimport { useRef, useEffect } from 'react'\nimport { Details, Main } from './components'\nimport { Grid } from '@material-ui/core'\nimport { PushToTalkButton, PushToTalkButtonContainer, ErrorPanel } from '@speechly/react-ui'\nimport { SpeechState, useSpeechContext} from '@speechly/react-client' \n\nconst App=() =>{\n  const classes = useStyles();\n  const speechState = useSpeechContext();\n  const main = useRef(null);\n\n  const executeScroll = () => main.current.scroolIntoView();\n\n  useEffect(() =>{\n      if(speechState === SpeechState.Recording){\n            executeScroll();\n      }\n  },[])\n  return (\n    <div>\n          <Grid className={classes.grid} container spacing={0} alignItems=\"center\" justify=\"center\" style={{height: \"100vh\", paddingBottom: '200px'}}>\n              <Grid item xs={12} sm={4} className={classes.mobile}>\n                    <Details title=\"Income\"/>\n              </Grid>\n              <Grid ref={main} item xs={12} sm={3} className={classes.main}>\n                    <Main/>\n              </Grid>\n              <Grid item xs={12} sm={4} className={classes.desktop}>\n                    <Details title=\"Income\"/>\n              </Grid>\n              <Grid item xs={12} sm={4} className={classes.last}>\n                    <Details title=\"Expense\"/>\n              </Grid>\n          </Grid>\n          <PushToTalkButtonContainer >\n                <PushToTalkButton/>\n                <ErrorPanel/>\n          </PushToTalkButtonContainer>\n   </div> \n    \n  );\n}\n\nexport default App;\n","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\reportWebVitals.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\index.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Details\\styles.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\styles.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\Main.jsx",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\styles.js",[],["95","96"],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Form\\Form.jsx",["97","98"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { Grid, Button , TextField, InputLabel,FormControl, Select, MenuItem, Typography, Grow} from '@material-ui/core'\r\nimport  useStyles  from './styles'\r\nimport { ExpenseTrackerContext } from '../../Context/Context'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { incomeCategories, expenseCategories} from '../../Constant/categories'\r\nimport { FormatDate } from '../../utils/FormatDate'\r\nimport { useSpeechContext } from '@speechly/react-client'\r\nimport CustomizedSnackBar from '../SnackBar/SnackBar'\r\n\r\nconst initialState = {\r\n    type:'Income',\r\n    amount:'',\r\n    category:'',\r\n    date: FormatDate(new Date()),\r\n}\r\n\r\nconst Form = () => {\r\n    const classes = useStyles()\r\n    const{ segment } = useSpeechContext()\r\n    const[formData, setFormData ] = useState(initialState)\r\n    const { addTransaction } = useContext(ExpenseTrackerContext)\r\n    const[open, setOpen] = useState(false);\r\n    // console.log(formData);\r\n\r\n    const createTransaction = () =>{\r\n        if(Number.isNaN(Number(formData.amount)) || formData.amount <=0 || !formData.date.includes(\"-\")) return\r\n        const transaction={ ...formData, amount: Number(formData.amount), id: uuidv4()}\r\n        \r\n        addTransaction(transaction);\r\n        setFormData(initialState)\r\n        setOpen(true)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        if(segment){\r\n            if(segment.intent.intent === \"add_income\"){\r\n                setFormData({ ...formData, type: \"Income\"})\r\n            }else if(segment.intent.intent === \"add_expense\"){\r\n                setFormData({ ...formData, type: \"Expense\"})\r\n            }else if(segment.isFinal && segment.intent.intent === \"create_transaction\"){\r\n                return createTransaction()\r\n            }else if(segment.isFinal && segment.intent.intent === \"cancel_transaction\"){\r\n                return setFormData(initialState)\r\n            }\r\n            segment.entities.forEach((e) =>{\r\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`\r\n                switch (e.type) {\r\n                    case 'amount': setFormData({ ...formData, amount:e.value})\r\n                                    break;\r\n                    case 'date': setFormData({ ...formData, date:e.value})\r\n                                    break;\r\n                    case 'category': \r\n                        if(incomeCategories.map((ic) => ic.type).includes(category)){\r\n                            setFormData({ ...formData, type:\"Income\",category:category})\r\n                        }else if(expenseCategories.map((ic) => ic.type).includes(category)){\r\n                            setFormData({ ...formData, type:\"Expense\",category:category})\r\n                        }\r\n                                    break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n            if(segment.isFinal && formData.amount && formData.type && formData.date && formData.category){\r\n                createTransaction();\r\n            }\r\n         }\r\n        },[segment])\r\n\r\n        \r\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories \r\n    \r\n    return (\r\n       <Grid container spacing={2}>\r\n           <CustomizedSnackBar open={open} setOpen={setOpen}/>\r\n           <Grid item xs={12}>\r\n               <Typography align=\"center\" variant=\"subtitle2\" gutterbottom>\r\n                  { (segment) ? (\r\n                      <>\r\n                      {segment.words.map((w) => w.value).join(\" \")}\r\n                      </>\r\n                  ) : null }\r\n               </Typography>\r\n            \r\n           </Grid>\r\n           <Grid item xs={6}>\r\n               <FormControl fullWidth >\r\n                   <InputLabel>Type</InputLabel>\r\n                   <Select value={formData.type} onChange={(e) => setFormData({...formData, type:e.target.value})}>\r\n                       <MenuItem value=\"Income\">Income</MenuItem>\r\n                       <MenuItem value=\"Expense\">Expense</MenuItem>\r\n                   </Select>\r\n               </FormControl>\r\n           </Grid>\r\n           <Grid item xs={6}>\r\n               <FormControl fullWidth>\r\n                   <InputLabel>Category</InputLabel>\r\n                   <Select value={formData.category} onChange={(e) => setFormData({...formData, category:e.target.value})}>\r\n                       { selectedCategories.map((category) =>(\r\n                           <MenuItem key= {category.type} value={category.type}>{category.type}</MenuItem>\r\n                       ))}\r\n                   </Select>\r\n               </FormControl>\r\n           </Grid>\r\n           <Grid item xs={6}>\r\n               <TextField type=\"number\" label=\"Amount\" fullWidth value={formData.amount} onChange={(e) => setFormData({...formData, amount:e.target.value})}/>\r\n           </Grid>\r\n           <Grid item xs={6}>\r\n               <TextField type=\"date\" label=\"Date\" fullWidth value={formData.date} onChange={(e) => setFormData({...formData, date: FormatDate(e.target.value)})}/>\r\n           </Grid>\r\n           <Button className={classes.button} variant=\"outlined\" color=\"white\" fullWidth onClick={createTransaction}>Craete</Button>\r\n       </Grid>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Form\\styles.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\List\\List.jsx",["99"],"import React,{ useContext } from 'react'\r\nimport  useStyles  from './styles'\r\nimport { ExpenseTrackerContext } from '../../../Context/Context'\r\nimport { List as MUIList, ListItem,  ListItemText , ListItemAvatar, Avatar, ListItemSecondaryAction, IconButton, Slide} from '@material-ui/core'\r\nimport { Delete, MoneyOff } from '@material-ui/icons'\r\n\r\nconst List = () => {\r\n    const classes = useStyles()\r\n    const { deleteTransaction, transactions } = useContext(ExpenseTrackerContext);\r\n\r\n    // console.log(globalState);\r\n\r\n    // const transactions = [\r\n    //     {id:1, type:\"Income\", category:\"Salary\", amount:50, date:new Date()},\r\n    //     {id:2, type:\"Expense\", category:\"Pets\", amount:100, date:new Date()},\r\n    //     {id:3, type:\"Income\", category:\"Buisness\", amount:50, date:new Date()}\r\n    // ];\r\n    return (\r\n        <MUIList dense={false} className={classes.list}>\r\n            {transactions.map((transaction) =>(\r\n                <Slide direction=\"down\" in mountOnEnter unmountOnExit key={transaction.id}>\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <Avatar className={transaction.type === \"Income\" ? classes.avatarIncome : classes.avatarExpense}>\r\n                                <MoneyOff/>\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={transaction.category} secondary={`$${transaction.amount} - ${transaction.date}`}/>\r\n                        <ListItemSecondaryAction aria-label=\"delete\" onClick={() => deleteTransaction(transaction.id)} >\r\n                            <Delete/>\r\n                        </ListItemSecondaryAction>\r\n\r\n                    </ListItem>\r\n                </Slide>\r\n            ))}\r\n        </MUIList>\r\n    )\r\n}\r\n\r\nexport default List\r\n","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\Main\\List\\styles.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\Context\\Context.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\Context\\contextReducer.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\Constant\\categories.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\utils\\FormatDate.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\useTransactions.js",["100"],"import { useContext } from 'react'\r\nimport { ExpenseTrackerContext } from './Context/Context'\r\nimport { incomeCategories, expenseCategories, resetCategories} from './Constant/categories'\r\n\r\nconst useTransactions = ({title}) =>{\r\n    resetCategories();\r\n    const { transactions } = useContext(ExpenseTrackerContext);\r\n    const transactionPerType = transactions.filter((t) => t.type === title);\r\n    console.log(transactions);\r\n    const total = transactionPerType.reduce((acc,currVal) => acc += currVal.amount,0);\r\n    const categories = (title === \"Income\") ? incomeCategories : expenseCategories;\r\n\r\n    transactionPerType.map((t) =>{\r\n        const category = categories.find((c) => c.type === t.category);\r\n        if(category) category.amount += t.amount\r\n    });\r\n\r\n    const filterCategories = categories.filter((c) => c.amount > 0);\r\n\r\n    const chartData ={\r\n        datasets:[{\r\n            data: filterCategories.map((c) => c.amount),\r\n            backgroundColor: filterCategories.map((c) => c.color),\r\n        }],\r\n        labels: filterCategories.map((c) => c.type),\r\n    }\r\n    console.log({total,chartData})\r\n    return { total, chartData}\r\n    \r\n}\r\nexport default useTransactions","C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\SnackBar\\SnackBar.jsx",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\SnackBar\\styles.js",[],"C:\\Users\\rrajveer\\Documents\\React_practice\\voice-expense-tracker\\src\\components\\InfoCard.jsx",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":19,"column":5,"nodeType":"107","endLine":19,"endColumn":7,"suggestions":"108"},{"ruleId":"101","replacedBy":"109"},{"ruleId":"103","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":2,"column":90,"nodeType":"113","messageId":"114","endLine":2,"endColumn":94},{"ruleId":"105","severity":1,"message":"115","line":68,"column":11,"nodeType":"107","endLine":68,"endColumn":20,"suggestions":"116"},{"ruleId":"111","severity":1,"message":"117","line":4,"column":102,"nodeType":"113","messageId":"114","endLine":4,"endColumn":112},{"ruleId":"118","severity":1,"message":"119","line":13,"column":32,"nodeType":"120","messageId":"121","endLine":13,"endColumn":34},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'speechState'. Either include it or remove the dependency array.","ArrayExpression",["124"],["122"],["123"],"no-unused-vars","'Grow' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["125"],"'IconButton' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [speechState]",{"range":"130","text":"131"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"132","text":"133"},[621,623],"[speechState]",[3090,3099],"[createTransaction, formData, segment]"]